"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9223],{8434:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"Toolchain/Recipes/MultiPlayerGames","title":"Multi-player games","description":"**Link to the example model**: LinkToUnity/Models/Code Examples/Multi player game.gaml","source":"@site/docs/Toolchain/04-Recipes/10-MultiPlayerGames.md","sourceDirName":"Toolchain/04-Recipes","slug":"/Toolchain/Recipes/MultiPlayerGames","permalink":"/Toolchain/Recipes/MultiPlayerGames","draft":false,"unlisted":false,"editUrl":"https://github.com/project-SIMPLE/documentation/tree/main/docs/Toolchain/04-Recipes/10-MultiPlayerGames.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Constraining movement of players from GAMA","permalink":"/Toolchain/Recipes/ConstrainingPlayerMovement"},"next":{"title":"Management of agents\u2019 animation","permalink":"/Toolchain/Recipes/ManagingAgentsAnimation"}}');var o=t(4848),i=t(8453);const s={},r="Multi-player games",l={},c=[];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.RP)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"multi-player-games",children:"Multi-player games"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:(0,o.jsx)(n.strong,{children:"Link to the example model"})}),": ",(0,o.jsx)(n.a,{href:"https://github.com/project-SIMPLE/simple.toolchain/blob/2024-06/GAMA%20Plugin/gaml.extension.unity/models/LinkToUnity/Models/Code%20Examples/Multi%20player%20game.gaml",children:"LinkToUnity/Models/Code Examples/Multi player game.gaml"})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://github.com/user-attachments/assets/4c85bd78-17d3-4a61-9f3f-4870954e69c0",alt:"ezgif com-optimize-4"})}),"\n",(0,o.jsx)(n.p,{children:"The general idea is to manage the interactions between players through GAMA."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"When a player \xab\xa0modify\xa0\xbb the world, it sends a message to GAMA, then GAMA sends a message to all players to inform about this modification."}),"\n",(0,o.jsx)(n.li,{children:'Possibility to use a Unity Properties defined in GAMA to represent the other players through the use of the variable "player_unity_properties" of the Unity Linker.'}),"\n"]}),"\n",(0,o.jsx)("img",{width:"1297",alt:"Player_properties",src:"https://github.com/user-attachments/assets/07ee1595-b92b-44fc-85d3-772eceec453d"}),"\n",(0,o.jsx)(n.p,{children:"As an example, we define an interaction where we let the players modify the color of pylon by their color through ray interaction."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"In GAMA"}),": we define an action in Unity Linker that changes the color of a given pylon and sends a message to all players about this change"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'species unity_linker parent: abstract_unity_linker {\n\t[\u2026]\n\t//action that will be called from unity with two argument: the id of the pylon selected, the player that change the color of the pylon\n\taction change_color(string id, string player) {\n\t\t//pylon that was selected\n\t\tpylon the_pylon <- pylon first_with (each.name = id) ;\n\t\t//player that triggers the action\n\t\tunity_player the_player <-  unity_player first_with (each.name = player) ;\n\n\t\tif (the_pylon != nil) {\n\t\t\t// change the color of the pylon agent\n\t\t\tthe_pylon.color <- the_player.color;\n\t\t\t//send a massage to all the players to change the color of the given pylon for all the players\n\t\t\tdo send_message players: unity_player as list mes: ["id"::id, "color"::[the_pylon.color.red,the_pylon.color.green,the_pylon.color.blue, the_pylon.color.alpha]];\n\t\t}\n\t}\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"In Unity"}),": we define a new class to serialize the message from GAMA. The color is represented by a list of 4 values (red, green, blue, alpha):"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"[System.Serializable]\npublic class ChangeColorMessage\n{\n    public string id;\n    public List<int> color;\n\n    public static ChangeColorMessage CreateFromJSON(string jsonString)\n    {\n        return JsonUtility.FromJson<ChangeColorMessage>(jsonString);\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"In Unity"}),": we add a new behavior in the method \xab\xa0other update\xa0\xbb of the Simulation Manager to serialize the message and update the corresponding pylon color."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"//action activated at the end of the update phase (every frame)\n protected override void OtherUpdate() {\n     if (message != null) {\n            Color c = new Color32(BitConverter.GetBytes(message.color[0])[0], BitConverter.GetBytes(message.color[1])[0],\n                    BitConverter.GetBytes(message.color[2])[0], BitConverter.GetBytes(message.color[3])[0]);\n\n            [\u2026]\n            GameObject obj = SelecableObjects[message.id];\n            SimulationMultiPlayerExample.ChangeColor(obj, c);\n            [\u2026]\n            message = null;\n        }\n     }\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"In Unity"}),": we define what will happens when a pylon is selected, i.e. a message is sent to GAMA to change the color of the pylon."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'protected override void SelectInteraction(SelectEnterEventArgs ev) {\n    if (remainingTime <= 0.0)\n    {\n    GameObject obj = ev.interactableObject.transform.gameObject;\n       if (("selectable").Equals(obj.tag)) {\n           Dictionary<string, string> args = new Dictionary<string, string> {\n          {"id", obj.name },\n            {"player",ConnectionManager.Instance.GetConnectionId()}};\n\nConnectionManager.Instance.SendExecutableAsk("change_color", args);\n        remainingTime = timeWithoutInteraction;\n       }\n    }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.RP)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{RP:()=>i,xA:()=>r});var a=t(6540);const o=a.createContext({});function i(e){const n=a.useContext(o);return a.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const s={};function r({components:e,children:n,disableParentContext:t}){let r;return r=t?"function"==typeof e?e({}):e||s:i(e),a.createElement(o.Provider,{value:r},n)}}}]);