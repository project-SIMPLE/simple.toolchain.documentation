"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4247],{4691:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"Tutorials/MultiPlayerGames","title":"MultiPlayerGames","description":"Multi-player games","source":"@site/docs/Tutorials/MultiPlayerGames.md","sourceDirName":"Tutorials","slug":"/Tutorials/MultiPlayerGames","permalink":"/Tutorials/MultiPlayerGames","draft":false,"unlisted":false,"editUrl":"https://github.com/project-SIMPLE/documentation/tree/main/docs/Tutorials/MultiPlayerGames.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docSidebar","previous":{"title":"ManagingWater","permalink":"/Tutorials/ManagingWater"},"next":{"title":"Preamble","permalink":"/Tutorials/Running-a-model-game"}}');var r=n(4848),s=n(8453);const i={},o=void 0,l={},c=[{value:"Multi-player games",id:"multi-player-games",level:2}];function h(e){const t={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.RP)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"multi-player-games",children:"Multi-player games"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.em,{children:(0,r.jsx)(t.strong,{children:"Link to the example model"})}),": ",(0,r.jsx)(t.a,{href:"https://github.com/project-SIMPLE/simple.toolchain/blob/2024-06/GAMA%20Plugin/gaml.extension.unity/models/LinkToUnity/Models/Code%20Examples/Multi%20player%20game.gaml",children:"LinkToUnity/Models/Code Examples/Multi player game.gaml"})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"https://github.com/user-attachments/assets/4c85bd78-17d3-4a61-9f3f-4870954e69c0",alt:"ezgif com-optimize-4"})}),"\n",(0,r.jsx)(t.p,{children:"The general idea is to manage the interactions between players through GAMA."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"When a player \xab\xa0modify\xa0\xbb the world, it sends a message to GAMA, then GAMA sends a message to all players to inform about this modification."}),"\n",(0,r.jsx)(t.li,{children:'Possibility to use a Unity Properties defined in GAMA to represent the other players through the use of the variable "player_unity_properties" of the Unity Linker.'}),"\n"]}),"\n",(0,r.jsx)("img",{width:"1297",alt:"Player_properties",src:"https://github.com/user-attachments/assets/07ee1595-b92b-44fc-85d3-772eceec453d"}),"\n",(0,r.jsx)(t.p,{children:"As an example, we define an interaction where we let the players modify the color of pylon by their color through ray interaction."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"In GAMA"}),": we define an action in Unity Linker that changes the color of a given pylon and sends a message to all players about this change"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'species unity_linker parent: abstract_unity_linker {\n\t[\u2026]\n\t//action that will be called from unity with two argument: the id of the pylon selected, the player that change the color of the pylon\n\taction change_color(string id, string player) {\n\t\t//pylon that was selected\n\t\tpylon the_pylon <- pylon first_with (each.name = id) ;\n\t\t//player that triggers the action\n\t\tunity_player the_player <-  unity_player first_with (each.name = player) ;\n\n\t\tif (the_pylon != nil) {\n\t\t\t// change the color of the pylon agent\n\t\t\tthe_pylon.color <- the_player.color;\n\t\t\t//send a massage to all the players to change the color of the given pylon for all the players\n\t\t\tdo send_message players: unity_player as list mes: ["id"::id, "color"::[the_pylon.color.red,the_pylon.color.green,the_pylon.color.blue, the_pylon.color.alpha]];\n\t\t}\n\t}\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"In Unity"}),": we define a new class to serialize the message from GAMA. The color is represented by a list of 4 values (red, green, blue, alpha):"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"[System.Serializable]\npublic class ChangeColorMessage\n{\n    public string id;\n    public List<int> color;\n\n    public static ChangeColorMessage CreateFromJSON(string jsonString)\n    {\n        return JsonUtility.FromJson<ChangeColorMessage>(jsonString);\n    }\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"In Unity"}),": we add a new behavior in the method \xab\xa0other update\xa0\xbb of the Simulation Manager to serialize the message and update the corresponding pylon color."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"//action activated at the end of the update phase (every frame)\n protected override void OtherUpdate() {\n     if (message != null) {\n            Color c = new Color32(BitConverter.GetBytes(message.color[0])[0], BitConverter.GetBytes(message.color[1])[0],\n                    BitConverter.GetBytes(message.color[2])[0], BitConverter.GetBytes(message.color[3])[0]);\n\n            [\u2026]\n            GameObject obj = SelecableObjects[message.id];\n            SimulationMultiPlayerExample.ChangeColor(obj, c);\n            [\u2026]\n            message = null;\n        }\n     }\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"In Unity"}),": we define what will happens when a pylon is selected, i.e. a message is sent to GAMA to change the color of the pylon."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'protected override void SelectInteraction(SelectEnterEventArgs ev) {\n    if (remainingTime <= 0.0)\n    {\n    GameObject obj = ev.interactableObject.transform.gameObject;\n       if (("selectable").Equals(obj.tag)) {\n           Dictionary<string, string> args = new Dictionary<string, string> {\n          {"id", obj.name },\n            {"player",ConnectionManager.Instance.GetConnectionId()}};\n\nConnectionManager.Instance.SendExecutableAsk("change_color", args);\n        remainingTime = timeWithoutInteraction;\n       }\n    }\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,s.RP)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{RP:()=>s,xA:()=>o});var a=n(6540);const r=a.createContext({});function s(e){const t=a.useContext(r);return a.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const i={};function o({components:e,children:t,disableParentContext:n}){let o;return o=n?"function"==typeof e?e({}):e||i:s(e),a.createElement(r.Provider,{value:o},t)}}}]);