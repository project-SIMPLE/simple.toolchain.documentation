"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3265],{8968:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"Toolchain/Recipes/Running-a-model-game","title":"Preamble","description":"In what follows, we assume that the user has a GAMA model adapted to VR and a Unity project with at least one scene containing the prefabs needed to connect to GAMA. See the tutorial for more information on designing this GAMA model and the Unity project.","source":"@site/docs/Toolchain/04-Recipes/01-Running-a-model-game.md","sourceDirName":"Toolchain/04-Recipes","slug":"/Toolchain/Recipes/Running-a-model-game","permalink":"/Toolchain/Recipes/Running-a-model-game","draft":false,"unlisted":false,"editUrl":"https://github.com/project-SIMPLE/documentation/tree/main/docs/Toolchain/04-Recipes/01-Running-a-model-game.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"docSidebar","previous":{"title":"Exporting Data from Unity","permalink":"/Toolchain/SimpleTools/Export-Data-from-Unity"},"next":{"title":"Debugging","permalink":"/Toolchain/Recipes/Debugging"}}');var i=n(4848),o=n(8453);const s={},r="Preamble",d={},l=[{value:"From Unity",id:"from-unity",level:2},{value:"From a headset",id:"from-a-headset",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,o.RP)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"preamble",children:"Preamble"})}),"\n",(0,i.jsxs)(t.p,{children:["In what follows, we assume that the user has a GAMA model adapted to VR and a Unity project with at least one scene containing the prefabs needed to connect to GAMA. See the ",(0,i.jsx)(t.a,{href:"https://github.com/project-SIMPLE/simple.toolchain/wiki/02-Tutorial-%E2%80%90-From-GAMA-model-to-Virtual-Universe-%E2%80%90-case-of-a-traffic-model",children:"tutorial"})," for more information on designing this GAMA model and the Unity project."]}),"\n",(0,i.jsx)(t.h1,{id:"general-information",children:"General information"}),"\n",(0,i.jsx)(t.p,{children:"The model can be launched in different ways: from a headset/directly from unity in play mode - with/without middleware. The middleware makes it possible to better manage the connections between GAMA and Unity and is mandatory in the context of a multi-player game. It is thus recommended to use it."}),"\n",(0,i.jsx)(t.p,{children:"We will see in the following two ways to launch the game with the middleware: from Unity in play mode; from a VR headset. In all cases it will be necessary to run the middleware, connect GAMA to it, and launch the simulation from GAMA before, i.e. start the Unity experiment of the GAMA model."}),"\n",(0,i.jsxs)(t.p,{children:["The middleware can be downloaded ",(0,i.jsx)(t.a,{href:"https://github.com/project-SIMPLE/GamaServerMiddleware/archive/refs/heads/main.zip",children:"here"}),". All the information about the running of the middleware can be found in the ",(0,i.jsx)(t.a,{href:"https://github.com/project-SIMPLE/GamaServerMiddleware",children:"middleware wiki"}),"."]}),"\n",(0,i.jsx)(t.h1,{id:"running-the-modelgame",children:"Running the model/game"}),"\n",(0,i.jsx)(t.h2,{id:"from-unity",children:"From Unity"}),"\n",(0,i.jsx)(t.p,{children:"To run the model/game from Unity, follow the following steps:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Run the middleware"}),"\n"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["If you're using ",(0,i.jsx)(t.strong,{children:"Windows"}),": run ",(0,i.jsx)(t.code,{children:"start.bat"}),", located in the project root directory."]}),"\n",(0,i.jsxs)(t.li,{children:["If you're using ",(0,i.jsx)(t.strong,{children:"MacOS"})," or ",(0,i.jsx)(t.strong,{children:"Linux"}),": run ",(0,i.jsx)(t.code,{children:"start.sh"}),", located in the project root directory."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://github.com/user-attachments/assets/8f94d520-2da5-4a54-87b7-6cd1133de640",alt:"Terminal - running the middleware"})}),"\n",(0,i.jsxs)(t.p,{children:["The middleware will open a new page (",(0,i.jsx)(t.a,{href:"http://localhost:8000",children:"http://localhost:8000"}),") on your default web browser. if this page does not appear, just reload the page."]}),"\n",(0,i.jsx)(t.p,{children:"You should then get this page:"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://github.com/user-attachments/assets/0d919cb9-dedc-4828-bd77-8629c54078ed",alt:"Middleware - start"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"2. Run GAMA"})}),"\n",(0,i.jsx)(t.p,{children:"This step can be done before step 1. In this case, the middleware is connected directly to GAMA and you can proceed to step 4."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"3. Connect GAMA to the middleware"})}),"\n",(0,i.jsx)(t.p,{children:'On the middleware web page, click on "Try Connection". GAMA should after be connected (appearing in green).'}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://github.com/user-attachments/assets/31519d4b-ed78-4e15-9ce0-83da0c9dd54f",alt:"Middleware - GAMA connected"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"4. Launch the experiment"})}),"\n",(0,i.jsx)(t.p,{children:'In GAMA, runs the experiment integrating the connection with Unity. As an example, we will run the experiment "vr_xp" of the model provided with GAMA\'s Unity plugin: "Plugin models/LinkToUnity/Models/Code Examples/Send Static data.gaml"'}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://github.com/user-attachments/assets/b886657e-724a-4399-8b71-9acbd2256884",alt:"GAMA - run xp"})}),"\n",(0,i.jsx)(t.p,{children:'On the middleware web page, you should be able to see the status of the experiment in orange ("simulation paused")'}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://github.com/user-attachments/assets/cf404e47-848d-4496-b8b3-0a513092b223",alt:"Middleware - xp ok"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"5. Push on the Unity Play button"})}),"\n",(0,i.jsx)(t.p,{children:'Open the Scene that you want to run (it has to contain a Connection Manager and a Game manager). For example, in linked to the model "Send Static data.gaml" we will open in the "UnityVRTemplate" the Scene "Scenes/Code Examples/Receive Static Data". Then, clicks on the Play button.'}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://github.com/user-attachments/assets/836a87b0-eef2-4d48-be25-397c0872c5a4",alt:"Unity - Play"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"6. Add the player"})}),"\n",(0,i.jsx)(t.p,{children:"On the middleware web page, you should see the player trying to connect to the middleware in orange. Click the Add button to add it."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://github.com/user-attachments/assets/ab1b4f20-e281-4c8c-855a-09875312d579",alt:"Middleware - player"})}),"\n",(0,i.jsx)(t.p,{children:"The middleware should turn green and you will see the geometry sent by GAMA in Unity."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://github.com/user-attachments/assets/7f03cd6d-43a9-44f6-9176-570176227ded",alt:"Middleware - ok"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://github.com/user-attachments/assets/1937fa8a-6b0c-48d3-9b19-fd034a5ff35f",alt:"Result - Unity"})}),"\n",(0,i.jsx)(t.h2,{id:"from-a-headset",children:"From a headset"}),"\n",(0,i.jsx)(t.p,{children:"Connecting a headset to GAMA is the same as running Unity with GAMA. The only difference is the need to set the correct IP and build and export the application on the headset."}),"\n",(0,i.jsx)(t.p,{children:'Go to "Managers/Connection Manager" from the Scene and in the "Default IP" field, set the IP of the PC running GAMA (to replace "localhost"). Note that the headset and the PC must use the same WiFi network to work. Be sure as well that "Fixed Properties" is checked as it allows to use the IP defined in "Default IP".'}),"\n",(0,i.jsx)(t.p,{children:'In the File Menu, choose "Build Settings...".'}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://github.com/user-attachments/assets/d1168b79-5cad-4f0b-a128-1b3f2dd2a167",alt:"Build-setting_menu"})}),"\n",(0,i.jsx)(t.p,{children:'In this panel, select "Android" then click on "Switch platform". In the "Scene in Build" panel, select the Scenes that you want to export on the headset. For example, the Scene "Scene/Code Examples/Receive Static Data". If the Scene is not available, open the scene in Unity, then click on "Add Open Scene" in the "Build Settings..." panel.'}),"\n",(0,i.jsxs)(t.p,{children:['Then click on "Build and Run". You will need to select a file for the application. If your headset is not connected, a pop-up will appear. You will need to connect your headset and click on "Retry". To connect the headset, simply plug your headset to the computer using a USB-C cable and accept any authorization that appears. Note that the headset must be in "',(0,i.jsx)(t.a,{href:"https://knowledge.vr-expert.com/kb/how-to-activate-developer-mode-on-the-meta-quest-3/",children:"Developer Mode"}),'" to export the application to it.']}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{src:"https://github.com/user-attachments/assets/ffa8a531-4593-4594-87ca-8fea17f16a8a",alt:"Build-setting"})}),"\n",(0,i.jsx)(t.p,{children:'Once the application is exported, it should start right on the headset if you have already set up a boundary. If you don\'t see the application running, just click on the "Meta" button on the right controller, quit the application, and run it again. To run the application, in the application panel of the headset, select applications from "Unknown source" and you should be able to find your application.'})]})}function c(e={}){const{wrapper:t}={...(0,o.RP)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{RP:()=>o,xA:()=>r});var a=n(6540);const i=a.createContext({});function o(e){const t=a.useContext(i);return a.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const s={};function r({components:e,children:t,disableParentContext:n}){let r;return r=n?"function"==typeof e?e({}):e||s:o(e),a.createElement(i.Provider,{value:r},t)}}}]);